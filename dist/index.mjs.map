{"version":3,"file":"index.mjs","sources":["../src/ChartUtils.js","../src/index.js","../src/Types/ChartTypes.js"],"sourcesContent":["import React from \"react\";\r\nimport { Bar, Line, HorizontalBar, defaults } from \"react-chartjs-2\";\r\nimport ChartTypes from \"./Types/ChartTypes\";\r\n\r\ndefaults.global.defaultFontColor = \"#283444\";\r\ndefaults.global.defaultFontSize = 18;\r\ndefaults.global.defaultFontFamily = \"Lato\";\r\ndefaults.global.tooltips.titleFontFamily = \"Lato\";\r\n\r\nfunction GetChartData(labels, data, options) {\r\n  const { backgroundColor, borderColor, fill } = options;\r\n  return {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        data,\r\n        backgroundColor,\r\n        borderColor,\r\n        fill\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nfunction GetChartOptions(labels, data, chartType, title, options) {\r\n  const {\r\n    responsive,\r\n    shouldMaintainAspectRatio,\r\n    shouldShowLegend,\r\n    shouldShowTitle,\r\n    titleFontSize,\r\n    showTooltips,\r\n    tooltipBackgroundColor,\r\n    tooltipTitleFontSize,\r\n    tooltipTitleFontColor,\r\n    tooltipBodyFontSize,\r\n    tooltipBodyFontColor,\r\n    displayXAxis,\r\n    displayXAxisGridlines,\r\n    displayXAxisTicks,\r\n    beginXAxisAtZero,\r\n    displayYAxis,\r\n    displayYAxisGridlines,\r\n    displayYAxisTicks,\r\n    beginYAxisAtZero\r\n  } = options;\r\n  if (chartType === ChartTypes.H_BAR) {\r\n    return {\r\n      responsive,\r\n      maintainAspectRatio: shouldMaintainAspectRatio,\r\n      devicePixelRatio: 1,\r\n      events: [\"click\"],\r\n      legend: { display: shouldShowLegend },\r\n      layout: {\r\n        padding: { left: 0, right: 0, top: 0, bottom: 0 },\r\n        margin: { left: 0, right: 0, top: 0, bottom: 0 }\r\n      },\r\n      title: {\r\n        display: shouldShowTitle,\r\n        text: title,\r\n        fontSize: titleFontSize\r\n      },\r\n      tooltips: {\r\n        enabled: showTooltips,\r\n        backgroundColor: tooltipBackgroundColor,\r\n        titleFontSize: tooltipTitleFontSize,\r\n        titleFontColor: tooltipTitleFontColor,\r\n        titleFontFamily: \"Lato\",\r\n        titleMarginBottom: 12.5,\r\n        bodyFontSize: tooltipBodyFontSize,\r\n        bodyFontColor: tooltipBodyFontColor,\r\n        bodyFontFamily: \"Lato\",\r\n        bodySpacing: 12.5,\r\n        displayColors: true,\r\n        multiKeyBackground: \"#FFFFFF\",\r\n        xPadding: 20,\r\n        yPadding: 10,\r\n        callbacks: {\r\n          label(tooltipItem, data) {\r\n            if (Number(tooltipItem.xLabel) < 0) {\r\n              return `-$${Math.abs(Number(tooltipItem.yLabel))\r\n                .toFixed(0)\r\n                .toString()\r\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\r\n            }\r\n            return `$${Math.abs(Number(tooltipItem.xLabel))\r\n              .toFixed(0)\r\n              .toString()\r\n              .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            display: displayXAxis,\r\n            gridLines: { display: displayXAxisGridlines },\r\n            ticks: {\r\n              display: displayXAxisTicks,\r\n              beginAtZero: beginXAxisAtZero,\r\n              callback(label, index, labels) {\r\n                return Intl.NumberFormat(\"the\", {\r\n                  style: \"currency\",\r\n                  currency: \"USD\",\r\n                  minimumFractionDigits: 0\r\n                })\r\n                  .format(label)\r\n                  .replace(/^(\\D-)/, \"$\");\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: displayYAxis,\r\n            gridLines: { display: displayYAxisGridlines },\r\n            ticks: {\r\n              display: displayYAxisTicks,\r\n              beginAtZero: beginYAxisAtZero\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  }\r\n  return {\r\n    responsive,\r\n    maintainAspectRatio: shouldMaintainAspectRatio,\r\n    devicePixelRatio: 1,\r\n    legend: { display: shouldShowLegend },\r\n    layout: { padding: { left: 0, right: 0, top: 50, bottom: 0 } },\r\n    title: {\r\n      display: shouldShowTitle,\r\n      text: title,\r\n      fontSize: titleFontSize\r\n    },\r\n    tooltips: {\r\n      enabled: showTooltips,\r\n      backgroundColor: tooltipBackgroundColor,\r\n      titleFontSize: tooltipTitleFontSize,\r\n      titleFontColor: tooltipTitleFontColor,\r\n      titleFontFamily: \"Lato\",\r\n      bodyFontSize: tooltipBodyFontSize,\r\n      bodyFontColor: tooltipBodyFontColor,\r\n      bodyFontFamily: \"Lato\",\r\n      displayColors: false,\r\n      xPadding: 20,\r\n      yPadding: 10,\r\n      callbacks: {\r\n        label(tooltipItem, data) {\r\n          if (Number(tooltipItem.yLabel) < 0) {\r\n            return `-$${Math.abs(Number(tooltipItem.yLabel))\r\n              .toFixed(0)\r\n              .toString()\r\n              .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\r\n          }\r\n          return `$${Math.abs(Number(tooltipItem.yLabel))\r\n            .toFixed(0)\r\n            .toString()\r\n            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          display: displayXAxis,\r\n          gridLines: { display: displayXAxisGridlines },\r\n          ticks: { display: displayXAxisTicks, beginAtZero: beginXAxisAtZero }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          display: displayYAxis,\r\n          gridLines: { display: displayYAxisGridlines },\r\n          ticks: {\r\n            display: displayYAxisTicks,\r\n            beginAtZero: beginYAxisAtZero,\r\n            callback(label, index, labels) {\r\n              if (Number(label) < 0) {\r\n                return `-$${Math.abs(Number(label))\r\n                  .toFixed(0)\r\n                  .toString()\r\n                  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\r\n              }\r\n              return `$${Math.abs(Number(label))\r\n                .toFixed(0)\r\n                .toString()\r\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`;\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n}\r\n\r\nfunction GetChartComponent(chartType, chartData, chartOptions, options) {\r\n  const { width, height } = options;\r\n  switch (chartType) {\r\n    case ChartTypes.V_BAR:\r\n      return React.createElement(Bar.default, {\r\n        data: chartData,\r\n        options: chartOptions,\r\n        width,\r\n        height\r\n      });\r\n\r\n    case ChartTypes.H_BAR:\r\n      return React.createElement(HorizontalBar.default, {\r\n        data: chartData,\r\n        options: chartOptions,\r\n        width,\r\n        height\r\n      });\r\n    case ChartTypes.LINE:\r\n      return React.createElement(Line.default, {\r\n        data: chartData,\r\n        options: chartOptions,\r\n        width,\r\n        height\r\n      });\r\n    case ChartTypes.AREA:\r\n      return React.createElement(Line.default, {\r\n        data: chartData,\r\n        options: chartOptions,\r\n        width,\r\n        height\r\n      });\r\n    default:\r\n      return React.createElement(Bar.default, {\r\n        data: chartData,\r\n        options: chartOptions,\r\n        width,\r\n        height\r\n      });\r\n  }\r\n}\r\n\r\nexport { GetChartData, GetChartOptions, GetChartComponent };\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GetChartData, GetChartOptions, GetChartComponent } from \"./ChartUtils\";\n\nclass SimpleChart extends React.Component {\n  render() {\n    const { chartType, labels, data, title, options } = this.props;\n\n    const CHART_DATA = GetChartData(labels, data, options);\n    const CHART_OPTIONS = GetChartOptions(\n      labels,\n      data,\n      chartType,\n      title,\n      options\n    );\n    const chart = GetChartComponent(\n      chartType,\n      CHART_DATA,\n      CHART_OPTIONS,\n      options\n    );\n\n    return chart;\n  }\n}\n\nexport default SimpleChart;\n\nSimpleChart.propTypes = {\n  chartType: PropTypes.string.isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string).isRequired,\n  data: PropTypes.arrayOf(PropTypes.number).isRequired,\n  title: PropTypes.string,\n  options: PropTypes.object\n};\n\nSimpleChart.defaultProps = {\n  title: \"Super Simple Chart\",\n  options: {\n    backgroundColor: \"rgba(13,119,248,0.9)\",\n    borderColor: \"rgba(13,119,248,0.9)\",\n    fill: true,\n    responsive: true,\n    shouldMaintainAspectRatio: true,\n    shouldShowLegend: false,\n    shouldShowTitle: true,\n    titleFontSize: 18,\n    showTooltips: true,\n    tooltipBackgroundColor: \"rgba(255,255,255,1)\",\n    tooltipTitleFontSize: 20,\n    tooltipTitleFontColor: \"rgba(0,0,0,0.8)\",\n    tooltipBodyFontSize: 18,\n    tooltipBodyFontColor: \"rgba(0,0,0,0.8)\",\n    displayXAxis: true,\n    displayXAxisGridlines: true,\n    displayXAxisTicks: true,\n    beginXAxisAtZero: true,\n    displayYAxis: true,\n    displayYAxisGridlines: true,\n    displayYAxisTicks: true,\n    beginYAxisAtZero: true,\n    width: 500,\n    height: 250\n  }\n};\n","const ChartTypes = {\r\n  V_BAR: \"Vertical Bar\",\r\n  H_BAR: \"Horizontal Bar\",\r\n  LINE: \"Simple Line\",\r\n  AREA: \"Area Chart\"\r\n};\r\n\r\nexport default ChartTypes;\r\n"],"names":["defaults","global","defaultFontColor","defaultFontSize","defaultFontFamily","tooltips","titleFontFamily","SimpleChart","render","this","props","chartType","chartData","chartOptions","options","React","createElement","Bar","default","data","width","height","HorizontalBar","Line","GetChartComponent","labels","datasets","GetChartData","title","responsive","maintainAspectRatio","shouldMaintainAspectRatio","devicePixelRatio","events","legend","display","shouldShowLegend","layout","padding","left","right","top","bottom","margin","shouldShowTitle","text","fontSize","titleFontSize","enabled","showTooltips","backgroundColor","tooltipBackgroundColor","tooltipTitleFontSize","titleFontColor","tooltipTitleFontColor","titleMarginBottom","bodyFontSize","tooltipBodyFontSize","bodyFontColor","tooltipBodyFontColor","bodyFontFamily","bodySpacing","displayColors","multiKeyBackground","xPadding","yPadding","callbacks","label","tooltipItem","Number","xLabel","Math","abs","yLabel","toFixed","toString","replace","scales","xAxes","displayXAxis","gridLines","displayXAxisGridlines","ticks","displayXAxisTicks","beginAtZero","beginXAxisAtZero","callback","index","Intl","NumberFormat","style","currency","minimumFractionDigits","format","yAxes","displayYAxis","displayYAxisGridlines","displayYAxisTicks","beginYAxisAtZero","GetChartOptions","Component","propTypes","PropTypes","string","isRequired","arrayOf","number","object","defaultProps","borderColor","fill"],"mappings":"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"}